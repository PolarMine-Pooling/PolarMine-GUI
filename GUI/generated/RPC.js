//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `RPC.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Client = _ModuleRegistry.module("Client");

    const iceC_Client_Stats_ids = [
        "::Client::Stats",
        "::Ice::Object"
    ];

    Client.Stats = class extends Ice.Object
    {
    };

    Client.StatsPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Client.Stats, Client.StatsPrx, iceC_Client_Stats_ids, 0,
    {
        "xch": [, , , , [1], , , , , ],
        "hdd": [, , , , [1], , , , , ],
        "active": [, , , , [1], , , , , ],
        "XCHpc": [, , , , [3], , , , , ],
        "HDDpc": [, , , , [3], , , , , ],
        "CheckXCHConfigPath": [, , , , [7], , , , , ],
        "CheckHDDConfigPath": [, , , , [7], , , , , ],
        "CheckToken": [, , , , [7], , , , , ],
        "shutdown": [, , , , , , , , , ]
    });

    const iceC_Client_Update_ids = [
        "::Client::Update",
        "::Ice::Object"
    ];

    Client.Update = class extends Ice.Object
    {
    };

    Client.UpdatePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Client.Update, Client.UpdatePrx, iceC_Client_Update_ids, 0,
    {
        "SetXCH": [, , , , [1], [[1]], , , , ],
        "SetHDD": [, , , , [1], [[1]], , , , ],
        "ChangeXCHConfigPath": [, , , , [1], [[7]], , , , ],
        "ChangeHDDConfigPath": [, , , , [1], [[7]], , , , ],
        "ChangeToken": [, , , , [1], [[7]], , , , ],
        "RestoreRewardAddress": [, , , , [1], , , , , ],
        "shutdown": [, , , , , , , , , ]
    });
    exports.Client = Client;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
